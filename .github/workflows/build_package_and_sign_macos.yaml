name: Build, Package, & Sign macOS

on:
  workflow_dispatch:
    inputs:
      use_latest_data:
        description: 'Use the data that was flagged as latest'
        required: false
        default: 'false'
        type: boolean
      project:
        description: 'Prefix for the project'
        required: true
        default: 'rar-rs'
        type: string
      ref:
        description: 'The SHA of the commit to build'
        required: false
        default: ''
        type: string
  workflow_call:
    inputs:
      # maybe we don't need this
      version:
        description: 'Version'
        required: true
        default: 'auto'
        type: string
      ref:
        description: 'The branch, tag, or SHA of the commit to build'
        required: false
        default: ''
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      CODESIGN_CERT:
        required: true
      CODESIGN_CERT_PASS:
        required: true
      CODESIGN_CERT_IDENTITY:
        required: true


jobs:
  build_package_sign:
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 1

      - name: Check JQ
        run: |
          jq --version
          which jq

      - name: Generate VERSION
        run: |
          VERSION=$(git show -s --format=%H HEAD)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          DATE=$(git show -s --format=%ci HEAD|cut -b1-10)
          echo "DATE=${DATE}" >> $GITHUB_ENV
          echo "VERSION: ${VERSION}"
          echo "DATE:    ${DATE}"

      - name: Prepare Variables
        shell: bash
        run: |
          echo ${PATH}
          export GITHUB_JSON='${{ toJSON(github) }}'
          export ENV_JSON='${{ toJSON(env) }}'
          export RUNNER_JSON='${{ toJSON(runner) }}'
          workflow/helpers/env.sh

      - name: Use latest data?
        if: ${{ github.event.inputs.use_latest_data == 'true' }}
        run: |
          echo ":TODO: patch variables for LATEST"

      - name: Copy rar-data archive from S3
        run: |
          archive="${{ env.OMAR_ARCHIVE_PREFIX }}omar${{ env.OMAR_ARCHIVE_SUFFIX }}"
          src="s3://${{ env.S3_ARCHIVE_BUCKET }}/${{ env.S3_DATA_ARCHIVE_FOLDER }}/${archive}"
          dest=${{ env.PARTS_FOLDER }}
          aws s3 cp \
            ${src} \
            ${dest}
          echo "Downloaded ${archive} to ${dest}" >> $GITHUB_STEP_SUMMARY
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"

      - name: Unpack archives
        run: |
          cd ${{ env.PARTS_FOLDER }}
          archive="${{ env.OMAR_ARCHIVE_PREFIX }}omar${{ env.OMAR_ARCHIVE_SUFFIX }}"
          tar xzf \
            ${{ env.PARTS_FOLDER }}/${archive}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: aarch64-apple-darwin

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: x86_64-apple-darwin

      - name: Cache crates
        uses: actions/cache@v2
        env:
          cache-name: cache-crates
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: macos-11-cargo-aarch64_and_x86_64-apple-darwin-${{ hashFiles('rar-rs/Cargo.lock')}}

      - name: Run cargo build --release for aarch64-apple-darwin
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --manifest-path rar-rs/Cargo.toml --target aarch64-apple-darwin --no-default-features --features "audio-apple"

      - name: Run cargo build --release for x86_64-apple-darwin
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --manifest-path rar-rs/Cargo.toml --target x86_64-apple-darwin --no-default-features --features "audio-apple"

      - name: Add Info.plist
        run: |
          echo "Adding Info.plist"
          version=${{ env.APP_VERSION }}
          exp1="s/<key>CFBundleVersion<\\/key><string>.*<\\/string>/<key>CFBundleVersion<\\/key><string>${{ env.BUILD_NUMBER }}<\\/string>/g"
          exp2="s/<key>CFBundleShortVersionString<\\/key><string>.*<\\/string>/<key>CFBundleShortVersionString<\\/key><string>${version}<\\/string>/g"
          cat rar-rs/Info.plist|sed ${exp1} |sed ${exp2} > ${{ env.PARTS_FOLDER }}/Info.plist

      - name: Add build number
        run: |
          echo "Adding build number"
          cp build_number.txt ${{ env.PARTS_FOLDER }}/

      - name: Add app version
        run: |
          echo "Adding app version"
          echo "${{ env.APP_VERSION }}" > ${{ env.PARTS_FOLDER }}/version.txt

      - name: Add FAT binary
        run: |
          echo "Adding FAT binary"
          lipo -create -output ${{ env.PARTS_FOLDER }}/rar \
            rar-rs/target/aarch64-apple-darwin/release/rar \
            rar-rs/target/x86_64-apple-darwin/release/rar 

      - name: Build AppIcon
        run: |
          echo "Creating AppIcon"
          /Applications/Xcode.app/Contents/Developer/usr/bin/actool --version
          echo ${{ env.PARTS_FOLDER }}
          echo "---"
          ls -l ${{ env.PARTS_FOLDER }}
          ls -l rar-rs/Assets.xcassets
          echo "---"
            /Applications/Xcode.app/Contents/Developer/usr/bin/actool \
              --version \
              --warnings \
              --errors \
              --notices \
              --compile ${{ env.PARTS_FOLDER }} \
              --app-icon AppIcon \
              --platform macosx \
              --minimum-deployment-target 10.0 \
              --output-partial-info-plist ${{ env.PARTS_FOLDER }}/partial-Info.plist \
              rar-rs/Assets.xcassets

      - name: List result
        run: |
          echo "sha:           ${{ github.sha }}"
          echo "ref_name:      ${{ github.ref_name }}"
          echo "ref:           ${{ github.ref }}"
          echo "ref_type:      ${{ github.ref_type }}"
          echo "event_name:    ${{ github.event_name }}"
          echo "actor:         ${{ github.actor }}"
          echo "run_id         ${{ github.run_id }}"
          # git rev-list --count ${{ github.sha }} # only works with deep clones
          cat build_number.txt
          ls -l rar-rs/target/aarch64-apple-darwin/release/
          ls -l rar-rs/target/x86_64-apple-darwin/release/
          ls -l ${{ env.PARTS_FOLDER }}/

      - name: Create .app
        run: |
          app_dir=${{ env.PACKAGE_FOLDER}}/${{ env.APP_NAME }}.app
          mkdir -p ${app_dir}
          mkdir -p ${app_dir}/Contents/MacOS
          mkdir -p ${app_dir}/Contents/Resources
          #
          cp ${{ env.PARTS_FOLDER }}/rar ${app_dir}/Contents/MacOS/
          cp ${{ env.PARTS_FOLDER }}/Info.plist ${app_dir}/Contents/
          cp ${{ env.PARTS_FOLDER }}/AppIcon.icns ${app_dir}/Contents/Resources/
          cp ${{ env.PARTS_FOLDER }}/Assets.car ${app_dir}/Contents/Resources/
          #
          cp ${{ env.PARTS_FOLDER }}/build_number.txt ${app_dir}/Contents/Resources/
          cp ${{ env.PARTS_FOLDER }}/version.txt ${app_dir}/Contents/Resources/
          #
          cp ${{ env.OMAR_FOLDER }}/*.omar ${app_dir}/Contents/Resources/

      - name: Prepare keychain
        run: |
          keychain_password="$(openssl rand -hex 32)"
          security create-keychain -p "${keychain_password}" "the-keychain"
          echo "${{ secrets.CODESIGN_CERT }}" | base64 --decode > cert.p12
          md5 < cert.p12
          keychain_db="${HOME}/Library/Keychains/the-keychain-db"
          security import cert.p12 -k "${keychain_db}" -P "${{ secrets.CODESIGN_CERT_PASS }}" -T "$(command -v codesign)"
          security set-key-partition-list -S "apple-tool:,apple:" -s -k "${keychain_password}" "${keychain_db}"
          security default-keychain -d "user" -s "${keychain_db}"
          security find-identity -v

      - name: Sign .app
        run: |
          echo ":TODO:"
          ping -c 5 time.apple.com
          cd ${{ env.PACKAGE_FOLDER}}
          codesign -s ${{ secrets.CODESIGN_CERT_IDENTITY }} -f -v --timestamp --options runtime rar-rs.app

        timeout-minutes: 10

      - name: Create archive
        run: |
          cd ${{ env.PACKAGE_FOLDER }}
          tar czf ${{ env.MACOS_APP_ARCHIVE }} .
          ls -l ${{ env.MACOS_APP_ARCHIVE }}

      - name: Copy archive to S3
        run: |
          aws s3 cp ${{ env.MACOS_APP_ARCHIVE }} s3://${{ env.S3_ARCHIVE_BUCKET }}/${{ env.S3_ARCHIVE_FOLDER }}/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"        

      - name: Create Summary
        run: |
          build_number=$(cat build_number.txt)
          echo "| VERSION           | ${{ env.VERSION }}          |" >> $GITHUB_STEP_SUMMARY
          echo "| :---------------- | --------------------------: |" >> $GITHUB_STEP_SUMMARY
          echo "| build_number      | ${build_number}             |" >> $GITHUB_STEP_SUMMARY
          echo "| APP_VERSION       | ${{ env.APP_VERSION }}      |" >> $GITHUB_STEP_SUMMARY
          echo "| S3 Archive        | \`s3://${{ env.S3_ARCHIVE_BUCKET }}/${{ env.S3_ARCHIVE_FOLDER }}/${{ env.ARCHIVE }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| MACOS_APP_ARCHIVE | ${{ env.MACOS_APP_ARCHIVE }}|" >> $GITHUB_STEP_SUMMARY




